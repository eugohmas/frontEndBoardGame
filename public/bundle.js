/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./client/app.js":
/*!***********************!*\
  !*** ./client/app.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _initializeBoard_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./initializeBoard.js */ \"./client/initializeBoard.js\");\n/* harmony import */ var _initialScreens_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./initialScreens.js */ \"./client/initialScreens.js\");\n/* harmony import */ var _initializePlayers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./initializePlayers.js */ \"./client/initializePlayers.js\");\n/* harmony import */ var _decksOfCards_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./decksOfCards.js */ \"./client/decksOfCards.js\");\n//ok so now I need to make a local boardgame. Then I will do a PR with Rach and see how I did.\r\n\r\n\r\n\r\n\r\n//*******************STATE************************** */\r\nlet state = {};\r\nconst boardElem = document.getElementById(\"board\");\r\nconst playerInfoElem = document.getElementById(\"playerInfo\");\r\n\r\nfunction removeBoard() {\r\n  while (boardElem.firstChild) {\r\n    boardElem.removeChild(boardElem.firstChild);\r\n  }\r\n  while (playerInfoElem.firstChild) {\r\n    playerInfoElem.removeChild(playerInfoElem.firstChild);\r\n  }\r\n  return;\r\n}\r\n\r\nfunction renderBoard() {\r\n  for (let i = 0; i < state.board.length; i++) {\r\n    let position = state.board[i];\r\n    let cellElem = document.createElement(\"div\");\r\n    let cellElem2 = document.createElement(\"span\");\r\n    let cellElem3 = document.createElement(\"span\");\r\n    let cellElem4 = document.createElement(\"span\");\r\n    cellElem2.innerText = position.value;\r\n    cellElem3.innerText = position.description;\r\n    cellElem4.innerText = position.playersHere;\r\n    //cellElem.innerText = position.value;\r\n    cellElem.classList.add(\"cell\");\r\n    cellElem.dataset.index = i;\r\n    cellElem.appendChild(cellElem2);\r\n    cellElem.appendChild(cellElem3);\r\n    cellElem.appendChild(cellElem4);\r\n    boardElem.appendChild(cellElem);\r\n  }\r\n  return;\r\n}\r\n\r\nfunction renderActions() {\r\n  let buttonElem = document.createElement(\"button\");\r\n  buttonElem.innerText = \"roll\";\r\n  buttonElem.id = \"rollButton\";\r\n  playerInfoElem.appendChild(buttonElem);\r\n  //I need a paragraph that tells you what is happening on your turn\r\n}\r\n\r\nfunction renderPlayers(whoseTurn) {\r\n  //first we need to clear each player location on the board\r\n  let board = state.board;\r\n  for (let i = 0; i < board.length; i++) {\r\n    let playersHere = state.board[i].playersHere;\r\n    if (playersHere.length > 0) {\r\n      while (playersHere.length > 0) {\r\n        state.board[i].playersHere.pop();\r\n      }\r\n    }\r\n  }\r\n  //then we need to set each player on the board\r\n  let players = state.players;\r\n  for (let i = 0; i < players.length; i++) {\r\n    state.board[players[i].playerLocation].playersHere.push(players[i].name);\r\n  }\r\n  console.log(players);\r\n}\r\n\r\nfunction rollDice() {\r\n  let dice = 1; //Math.floor(Math.random() * 6);\r\n  // if (dice === 0) {\r\n  //   dice = 1;\r\n  // }\r\n  return dice;\r\n}\r\nfunction movePlayer(amount) {\r\n  let players = state.players;\r\n  let currTurn = 1000000;\r\n  for (let i = 0; i < players.length; i++) {\r\n    if (players[i].isMyTurn) {\r\n      //here is where I wrap around\r\n      if (players[i].playerLocation + amount > state.board.length - 1) {\r\n        state.players[i].playerLocation =\r\n          players[i].playerLocation + amount - state.board.length;\r\n      } else {\r\n        state.players[i].playerLocation += amount;\r\n      }\r\n      //now I need to run the act function of the space I am on\r\n      if (state.board[state.players[i].playerLocation].hasOwnProperty(\"act\")) {\r\n        state.board[state.players[i].playerLocation].act(i); //state.players[i].playerLocation\r\n      }\r\n      if (i + 1 === players.length) {\r\n        currTurn = 0;\r\n      } else {\r\n        currTurn = i + 1;\r\n      }\r\n      state.players[i].isMyTurn = false;\r\n    }\r\n  }\r\n  state.players[currTurn].isMyTurn = true;\r\n  return;\r\n}\r\n\r\nboardElem.addEventListener(\"click\", function (event) {\r\n  if (event.target.id === \"submitPlayerNumber\") {\r\n    let numOfPlayers = Number(document.getElementById(\"numOfPlayers\").value);\r\n    if (Number.isInteger(numOfPlayers)) {\r\n      removeBoard();\r\n      (0,_initialScreens_js__WEBPACK_IMPORTED_MODULE_1__.getInitialPlayerInfo)(numOfPlayers, boardElem);\r\n    } else {\r\n      let cellElem = document.getElementById(\"numOfPlayersLabel\");\r\n      cellElem.innerText = \"enter a number you goof ball\";\r\n    }\r\n  }\r\n  //then when the players are submitted, we call the function set player info\r\n  if (event.target.id === \"submitPlayerInfo\") {\r\n    if ((0,_initialScreens_js__WEBPACK_IMPORTED_MODULE_1__.checkPlayerInfo)()) {\r\n      (0,_initializePlayers_js__WEBPACK_IMPORTED_MODULE_2__.setInitialPlayerInfo)(state);\r\n      removeBoard();\r\n      (0,_decksOfCards_js__WEBPACK_IMPORTED_MODULE_3__.initializeOTBDeck)(state);\r\n      (0,_decksOfCards_js__WEBPACK_IMPORTED_MODULE_3__.initializeFarmersFateDeck)(state);\r\n      (0,_initializeBoard_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(state);\r\n      renderPlayers();\r\n      renderBoard();\r\n      renderActions();\r\n    } else {\r\n      //tell them to correct the info\r\n    }\r\n  }\r\n});\r\nplayerInfoElem.addEventListener(\"click\", function (event) {\r\n  if (event.target.id === \"rollButton\") {\r\n    let diceNum = rollDice();\r\n    movePlayer(diceNum);\r\n    removeBoard();\r\n    renderPlayers();\r\n    renderBoard();\r\n    renderActions();\r\n  }\r\n});\r\n\r\n(0,_initialScreens_js__WEBPACK_IMPORTED_MODULE_1__.setInitialPlayerNumber)(boardElem);\r\n\r\n//so there are a couple things here.\r\n//we need the board to act upon the player based on the square that the player is in. So there will be functions on the board that act on the player. when the player moves, they will call the function on that board space\r\n\r\n//let's map this out. there are really 3 processes that occur:\r\n//1) when I move on the board, I land on spaces. these spaces can cost me money or give me money. they can also cause me to draw a farmers fate or gain an otb. these are board functions. the board holds these functions based on my location. ok, i got it to call the board function in movePlayer. now I need to fix each function on the board. I will also end up having to create the farmers fate deck and the otb deck here as well. I created the otb deck because it is the easiest. next I need to have the farmers fate deck. this will be a deck of functions that execute when drawn. So I need to write all the functions, then shuffle the deck and then check that each function works and does exactly what I want it to.\r\n\r\n//2) I can buy things based on my OTB list and if my position is less than spring planting. this occurs as a function of move player, if that player exists in a position between 0 and spring planting, there is a buy button\r\n\r\n//3) finally there is a harvest process, this allows me to harvest and get an operating expense based on my location. I think this should be a function of move player. Also this function should execute before the board functions. and harvest should occur before the operating expense.\r\n\r\n//I will have to have a function that deals with \"not enough money\" at some point.... but for now, I think we can ignore that. we assume that the player always has enough money.\r\n\r\n//there is a function for passing go, where it doesn't matter where you land, if you pass go, you get 5k\r\n\r\n//I should also probably add the footer to my html and then put the player info in the footer\r\n\r\n//setTimeout(function, amountOfMilliseconds) this allows you to wait to do something.\r\n\n\n//# sourceURL=webpack://game/./client/app.js?");

/***/ }),

/***/ "./client/decksOfCards.js":
/*!********************************!*\
  !*** ./client/decksOfCards.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initializeFarmersFateDeck: () => (/* binding */ initializeFarmersFateDeck),\n/* harmony export */   initializeOTBDeck: () => (/* binding */ initializeOTBDeck)\n/* harmony export */ });\nfunction initializeOTBDeck(state) {\r\n  const cardsOTB = [\r\n    { name: \"fruit\", value: 25000, amount: 5 },\r\n    { name: \"fruit\", value: 25000, amount: 5 },\r\n    { name: \"fruit\", value: 25000, amount: 5 },\r\n    { name: \"fruit\", value: 25000, amount: 5 },\r\n    { name: \"fruit\", value: 25000, amount: 5 },\r\n    { name: \"fruit\", value: 25000, amount: 5 },\r\n    { name: \"hay\", value: 20000, amount: 10 },\r\n    { name: \"hay\", value: 20000, amount: 10 },\r\n    { name: \"hay\", value: 20000, amount: 10 },\r\n    { name: \"hay\", value: 20000, amount: 10 },\r\n    { name: \"hay\", value: 20000, amount: 10 },\r\n    { name: \"grain\", value: 20000, amount: 10 },\r\n    { name: \"grain\", value: 20000, amount: 10 },\r\n    { name: \"grain\", value: 20000, amount: 10 },\r\n    { name: \"grain\", value: 20000, amount: 10 },\r\n    { name: \"grain\", value: 20000, amount: 10 },\r\n    { name: \"cows\", value: 5000, amount: 10 },\r\n    { name: \"cows\", value: 5000, amount: 10 },\r\n    { name: \"cows\", value: 5000, amount: 10 },\r\n    { name: \"cows\", value: 5000, amount: 10 },\r\n    { name: \"cows\", value: 5000, amount: 10 },\r\n    { name: \"cows\", value: 5000, amount: 10 },\r\n    { name: \"tractor\", value: 10000, amount: 1 },\r\n    { name: \"tractor\", value: 10000, amount: 1 },\r\n    { name: \"tractor\", value: 10000, amount: 1 },\r\n    { name: \"harvester\", value: 10000, amount: 1 },\r\n    { name: \"harvester\", value: 10000, amount: 1 },\r\n    { name: \"harvester\", value: 10000, amount: 1 },\r\n    { name: \"rent cascade range\", value: 40000, amount: 40 },\r\n    { name: \"rent cascade range\", value: 40000, amount: 40 },\r\n    { name: \"rent cascade range\", value: 40000, amount: 40 },\r\n    { name: \"rent rattlesnake ridge\", value: 30000, amount: 30 },\r\n    { name: \"rent rattlesnake ridge\", value: 30000, amount: 30 },\r\n    { name: \"rent rattlesnake ridge\", value: 30000, amount: 30 },\r\n    { name: \"rent toppenish ridge\", value: 50000, amount: 50 },\r\n    { name: \"rent toppenish ridge\", value: 50000, amount: 50 },\r\n    { name: \"rent toppenish ridge\", value: 50000, amount: 50 },\r\n    { name: \"rent ahtanum ridge\", value: 20000, amount: 20 },\r\n    { name: \"rent ahtanum ridge\", value: 20000, amount: 20 },\r\n    { name: \"rent ahtanum ridge\", value: 20000, amount: 20 },\r\n  ];\r\n  //ok so now we need to shuffle these cards somehow.\\\r\n  const shuffledCardsOTB = [];\r\n  const length = cardsOTB.length;\r\n  for (let i = 0; i < length; i++) {\r\n    let randoNum = Math.floor(Math.random() * cardsOTB.length);\r\n    let card = cardsOTB.splice(randoNum, 1);\r\n    shuffledCardsOTB.push(card);\r\n  }\r\n  //this works now I need to add them to my state in state.cardsOTB\r\n  state.cardsOTB = shuffledCardsOTB;\r\n}\r\n\r\nfunction initializeOperatingExpenseDeck() {\r\n  //unfortunately, this should probably just be a deck of functions because when they are drawn, they act out the function\r\n  cardsOperatingExpense = [\r\n    { desctiption: \"fertilizer bill due\", value: 100, condition: \"per acre\" },\r\n    {\r\n      desctiption: \"Custom hire bill due\",\r\n      value: 2000,\r\n      condition: \"no harvester\",\r\n    },\r\n    { desctiption: \"Seed bill due\", value: 3000, condition: \"none\" },\r\n    { desctiption: \"Monthly electric bill due\", value: 500, condition: \"none\" },\r\n    {\r\n      desctiption: \"Farm real estate taxes due\",\r\n      value: 1500,\r\n      condition: \"none\",\r\n    },\r\n    { desctiption: \"Equipment in the shop\", value: 1000, condition: \"none\" },\r\n    {\r\n      desctiption: \"Custom hire bill due\",\r\n      value: 2000,\r\n      condition: \"no tractor\",\r\n    },\r\n    { desctiption: \"Feed bill due\", value: 500, condition: \"per cow\" },\r\n    { desctiption: \"Parts bill due\", value: 500, condition: \"none\" },\r\n    {\r\n      desctiption: \"Semi-annual interest due\",\r\n      value: 0.1,\r\n      condition: \"10% of debt\",\r\n    },\r\n    { desctiption: \"Equipment breakdown\", value: 500, condition: \"none\" },\r\n    { desctiption: \"Seed bill due\", value: 3000, condition: \"none\" },\r\n    { desctiption: \"Vet bill\", value: 500, condition: \"if cows\" },\r\n    { desctiption: \"Equipment in the shop\", value: 1000, condition: \"none\" },\r\n    { desctiption: \"Fuel bill due\", value: 1000, condition: \"none\" },\r\n    { desctiption: \"Fertilizer bill due\", value: 100, condition: \"per acre\" },\r\n    { desctiption: \"custom hire bill\", value: 2000, condition: \"no harvester\" },\r\n    { desctiption: \"Fuel bill due\", value: 1000, condition: \"none\" },\r\n    { desctiption: \"parts bill due\", value: 500, condition: \"none\" },\r\n    {\r\n      desctiption: \"Semi-annual interest due\",\r\n      value: 0.1,\r\n      condition: \"10% of debt\",\r\n    },\r\n    { desctiption: \"Farmer's insurance due\", value: 1500, condition: \"none\" },\r\n    { desctiption: \"Equipment breakdown\", value: 500, condition: \"none\" },\r\n    {\r\n      desctiption: \"Custom hire bill due\",\r\n      value: 2000,\r\n      condition: \"no tractor\",\r\n    },\r\n    {\r\n      desctiption: \"Wire worm infects grain acreage\",\r\n      value: 100,\r\n      condition: \"per grain acre\",\r\n    },\r\n  ];\r\n}\r\n\r\n//I am not sure if I will have to pass state to each of the internal functions or not.\r\nfunction initializeFarmersFateDeck(state) {\r\n  const cardsFarmersFate = [\r\n    {\r\n      description:\r\n        \"your production cowboy does really well with your cows but instead of giving him a raise, you take the money! Receive a 50% bonus after you roll for your Livestock harvest for each of the next two years\",\r\n      value: 0.5,\r\n      condition: \"for cows\",\r\n      act: function (player) {\r\n        console.log(\r\n          `your production cowboy does really well with your cows but instead of giving him a raise, you take the money! Receive a 50% bonus after you roll for your Livestock harvest for each of the next two years. YEAH, I AM NOT DOING THIS ONE YET`\r\n        );\r\n        //yeah, I am not doing this one yet\r\n      },\r\n    },\r\n    {\r\n      description:\r\n        \"Russia Ukraine war boosts wheat prices. You make a ton of money off of other peoples hardships. Collect 2000\",\r\n      value: 2000,\r\n      condition: \"none\",\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 2000`);\r\n        state.players[player].money += 2000;\r\n      },\r\n    },\r\n    {\r\n      description:\r\n        \"You are not very good at farming. Go back to 2nd week of january and do not collect your 5000\",\r\n      value: 0,\r\n      condition: \"2nd week of jan no wage\",\r\n      act: function (player) {\r\n        console.log(`go back to the second week of January`);\r\n        state.players[player].playerLocation = 2;\r\n        //might need to have them draw an otb here too.\r\n      },\r\n    },\r\n    {\r\n      description:\r\n        \"vegetarian ninja warriors attack in the night and slaughter all of your cows on your farm, They didn't get to your rented cows\",\r\n      value: 0,\r\n      condition: \"lose farm cows\",\r\n      act: function (player) {\r\n        console.log(`lose all cows on your farm`);\r\n        state.players[player].localCows = 0;\r\n      },\r\n    },\r\n    {\r\n      description:\r\n        \"you accidentally mis-gendered your bank representative. Pay 10% of outstanding debt as additional interest.\",\r\n      value: 0.1,\r\n      condition: \"10% of debt\",\r\n      act: function (player) {\r\n        console.log(\r\n          `player ${player} you accidentally mis-gendered their bank representative. Pay 10% of outstanding debt as additional interest.`\r\n        );\r\n        state.players[player].money -= 0.1 * state.players[player].debt;\r\n      },\r\n    },\r\n    {\r\n      description: \"Custom hire bill due. pay 3000 if you have no tractor\",\r\n      value: 3000,\r\n      condition: \"no tractor\",\r\n      act: function (player) {\r\n        console.log(`Custom hire bill due. pay 3000 if you have no tractor`);\r\n        !state.players[player].tractor\r\n          ? (state.players[player].money -= 3000)\r\n          : state.players[player].money;\r\n      },\r\n    },\r\n    {\r\n      description:\r\n        \"Californians bought the land next to you. They have horses but have no idea how to take care of them. They pay you 100 per hay acre for your hay\",\r\n      value: 100,\r\n      condition: \"per hay acre\",\r\n      act: function (player) {\r\n        console.log(\r\n          `Californians bought the land next to you. They have horses but have no idea how to take care of them. They pay you 100 per hay acre for your hay`\r\n        );\r\n        state.players[player].money += state.players[player].hay * 100;\r\n      },\r\n    },\r\n    {\r\n      description:\r\n        \"Cut worms eat sprouting fruit buds. EPA bans control spray, pay 300 per fruit acre\",\r\n      value: 300,\r\n      condition: \"per fruit acre\",\r\n      act: function (player) {\r\n        console.log(\r\n          `Cut worms eat sprouting fruit buds. EPA bans control spray, pay 300 per fruit acre`\r\n        );\r\n        state.players[player].money -= state.players[player].fruit * 300;\r\n      },\r\n    },\r\n    {\r\n      description:\r\n        \"Russia nukes the US. Thankfully, you are out in BFE so your hay jumps in price. collect 500 per hay acre. Other players have to roll to see if they are ok. odd = escaped, even = pay 100 per acre (all acres) to clean up the mess\",\r\n      value: 500,\r\n      condition: \"per hay acre\",\r\n      act: function (player) {\r\n        console.log(\r\n          `Russia nukes the US. Thankfully, you are out in BFE so your hay jumps in price. collect 500 per hay acre. Other players have to roll to see if they are ok. odd = escaped, even = pay 100 per acre (all acres) to clean up the mess. YEAH, I AM NOT DOING THIS ONE YET`\r\n        );\r\n        //yeah, I am not doing this one yet\r\n      },\r\n    },\r\n    {\r\n      description: \"income taxes due\",\r\n      value: 7000,\r\n      condition: \"none\",\r\n      act: function (player) {\r\n        console.log(`income taxes due, pay 7000`);\r\n        state.players[player].money -= 7000;\r\n      },\r\n    },\r\n    {\r\n      description:\r\n        \"your uncle died. you can buy his 10 acres of hay for 10,000\",\r\n      value: 10000,\r\n      condition: \"none\",\r\n      act: function (player) {\r\n        console.log(\r\n          `your uncle died. you can buy his 10 acres of hay for 10,000. YEAH, I AM NOT DOING THIS ONE YET`\r\n        );\r\n        //yeah, I am not doing this one yet\r\n      },\r\n    },\r\n    {\r\n      description: \"your calves look fat!\",\r\n      value: 2000,\r\n      condition: \"if cows\",\r\n      act: function (player) {\r\n        console.log(`your calves look fat! Gain 2000`);\r\n        if (\r\n          state.players[player].localCows > 0 ||\r\n          state.players[player].rentedCows > 0\r\n        ) {\r\n          state.players[player].money += 2000;\r\n        }\r\n      },\r\n    },\r\n    {\r\n      description:\r\n        \"the owners of the local brewery set your orchard on fire, pay 500 per fruit acre\",\r\n      value: 500,\r\n      condition: \"per fruit acre\",\r\n      act: function (player) {\r\n        console.log(\r\n          `the owners of the local brewery set your orchard on fire, pay 500 per fruit acre`\r\n        );\r\n        state.players[player].money -= state.players[player].fruit * 500;\r\n      },\r\n    },\r\n    {\r\n      description:\r\n        \"You are bad at farming, but the conservatives still give you subsities, collect 100 per grain acre\",\r\n      value: 100,\r\n      condition: \"per grain acre\",\r\n      act: function (player) {\r\n        console.log(\r\n          `You are bad at farming, but the conservatives still give you subsities, collect 100 per grain acre`\r\n        );\r\n        state.players[player].money += state.players[player].wheat * 100;\r\n      },\r\n    },\r\n    {\r\n      description: \"you struck oil on your farm! gain 100 per acre\",\r\n      value: 100,\r\n      condition: \"per acre\",\r\n      act: function (player) {\r\n        console.log(`you struck oil on your farm! gain 100 per acre`);\r\n        state.players[player].money += state.players[player].hay * 100;\r\n        state.players[player].money += state.players[player].wheat * 100;\r\n        state.players[player].money += state.players[player].fruit * 100;\r\n      },\r\n    },\r\n    {\r\n      description:\r\n        \"media makes a fuss about the dangers of your fruit and how it is processed, cut your cherry crop in half this year\",\r\n      value: 0.5,\r\n      condition: \"for cherries\",\r\n      act: function (player) {\r\n        console.log(\r\n          `media makes a fuss about the dangers of your fruit and how it is processed, cut your cherry crop in half this year. YEAH, I AM NOT DOING THIS ONE YET`\r\n        );\r\n        //yeah, I am not doing this one yet\r\n      },\r\n    },\r\n    {\r\n      description:\r\n        \"The president slaps on a grain embargo while you are waiting for your hired harvester, pay 2500 if you don't own a harvester\",\r\n      value: 2500,\r\n      condition: \"no harvester\",\r\n      act: function (player) {\r\n        console.log(\r\n          `The president slaps on a grain embargo while you are waiting for your hired harvester, pay 2500 if you don't own a harvester`\r\n        );\r\n        !state.players[player].harvester\r\n          ? (state.players[player].money -= 2500)\r\n          : state.players[player].money;\r\n      },\r\n    },\r\n    {\r\n      description: \"market goes up, collect 1000\",\r\n      value: 1000,\r\n      condition: \"none\",\r\n      act: function (player) {\r\n        console.log(`market goes up, collect 1000`);\r\n        state.players[player].money += 1000;\r\n      },\r\n    },\r\n    {\r\n      description:\r\n        \"Trucker strike delays fruit in transport, lots of spoilage, pay 1000 per fruit acre\",\r\n      value: 1000,\r\n      condition: \"per fruit acre\",\r\n      act: function (player) {\r\n        console.log(\r\n          `Trucker strike delays fruit in transport, lots of spoilage, pay 1000 per fruit acre`\r\n        );\r\n        state.players[player].money -= state.players[player].fruit * 1000;\r\n      },\r\n    },\r\n    {\r\n      description:\r\n        \"your lazy bum forgot to spray for weeds, cut your wheat crop in half this year\",\r\n      value: 0.5,\r\n      condition: \"for wheat\",\r\n      act: function (player) {\r\n        console.log(\r\n          `your lazy bum forgot to spray for weeds, cut your wheat crop in half this year. YEAH, I AM NOT DOING THIS ONE YET`\r\n        );\r\n        //yeah, I am not doing this one yet\r\n      },\r\n    },\r\n    {\r\n      description: \"Custom hire bill due. If you have no tractor, pay 3000\",\r\n      value: 3000,\r\n      condition: \"no tractor\",\r\n      act: function (player) {\r\n        console.log(`Custom hire bill due. If you have no tractor, pay 3000`);\r\n        !state.players[player].tractor\r\n          ? (state.players[player].money -= 3000)\r\n          : state.players[player].money;\r\n      },\r\n    },\r\n    {\r\n      description:\r\n        \"lend out your harvester, If you have a harvester, collect 2000 from those who do not\",\r\n      value: 2000,\r\n      condition: \"per player\",\r\n      act: function (player) {\r\n        console.log(\r\n          `lend out your harvester, If you have a harvester, collect 2000 from those who do not. YEAH, I AM NOT DOING THIS ONE YET`\r\n        );\r\n        //yeah, I am not doing this one yet\r\n      },\r\n    },\r\n    {\r\n      description:\r\n        \"Drought year, go to second week of January, do not collect 5000\",\r\n      value: 0,\r\n      condition: \"go to 2nd week of jan, no money\",\r\n      act: function (player) {\r\n        console.log(\r\n          `Drought year, go to second week of January, do not collect 5000`\r\n        );\r\n        state.players[player].playerLocation = 2;\r\n        //might need to have them draw an otb here too.\r\n      },\r\n    },\r\n    {\r\n      description:\r\n        \"IRS garnishes your income after finding errors on your tax return. For the rest of the year, draw operating expense cards during harvest but do not roll for harvest check\",\r\n      value: 0.5,\r\n      condition: \"for cows\",\r\n      act: function (player) {\r\n        console.log(\r\n          `IRS garnishes your income after finding errors on your tax return. For the rest of the year, draw operating expense cards during harvest but do not roll for harvest check. YEAH, I AM NOT DOING THIS ONE YET`\r\n        );\r\n        //yeah, I am not doing this one yet\r\n      },\r\n    },\r\n  ];\r\n\r\n  //ok so now we need to shuffle these cards somehow.\\\r\n  const shuffledCardsFF = [];\r\n  const length = cardsFarmersFate.length;\r\n  for (let i = 0; i < length; i++) {\r\n    let randoNum = Math.floor(Math.random() * cardsFarmersFate.length);\r\n    let card = cardsFarmersFate.splice(randoNum, 1);\r\n    shuffledCardsFF.push(card);\r\n  }\r\n  //this works now I need to add them to my state in state.cardsOTB\r\n  state.cardsFF = shuffledCardsFF;\r\n}\r\n\n\n//# sourceURL=webpack://game/./client/decksOfCards.js?");

/***/ }),

/***/ "./client/initialScreens.js":
/*!**********************************!*\
  !*** ./client/initialScreens.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkPlayerInfo: () => (/* binding */ checkPlayerInfo),\n/* harmony export */   getInitialPlayerInfo: () => (/* binding */ getInitialPlayerInfo),\n/* harmony export */   setInitialPlayerNumber: () => (/* binding */ setInitialPlayerNumber)\n/* harmony export */ });\nfunction setInitialPlayerNumber(boardElem) {\r\n  let inputElem = document.createElement(\"input\");\r\n  inputElem.type = \"text\";\r\n  inputElem.id = \"numOfPlayers\";\r\n  let labelElem = document.createElement(\"label\");\r\n  labelElem.id = \"numOfPlayersLabel\";\r\n  labelElem.for = \"numOfPlayers\";\r\n  labelElem.innerText = \"How many players?\";\r\n  let buttonElem = document.createElement(\"button\");\r\n  buttonElem.innerText = \"submit\";\r\n  buttonElem.id = \"submitPlayerNumber\";\r\n  boardElem.appendChild(inputElem);\r\n  boardElem.appendChild(labelElem);\r\n  boardElem.appendChild(buttonElem);\r\n}\r\n\r\n//I hate this function the most!!!!\r\nfunction getInitialPlayerInfo(numOfPlayers, boardElem) {\r\n  //for loop that loops through number of players and adds name, color (should be a drop down), and type (should be a drop down with human or computer)\r\n  for (let i = 1; i <= numOfPlayers; i++) {\r\n    let cellElem = document.createElement(\"label\");\r\n    cellElem.innerText = `name of player ${i}`;\r\n    cellElem.id = `nameLabel${i}`;\r\n    let cellElem2 = document.createElement(\"input\");\r\n    cellElem2.type = \"text\";\r\n    cellElem2.id = `nameInput${i}`;\r\n    //now we need two drop downs\r\n    let cellElem3 = document.createElement(\"label\");\r\n    cellElem3.innerText = `color of player ${i}`;\r\n    cellElem3.id = `colorLabel${i}`;\r\n    let cellElem4 = document.createElement(\"select\");\r\n    cellElem4.id = `colorSelection${i}`;\r\n    let optionElem1 = document.createElement(\"option\");\r\n    optionElem1.text = \"red\";\r\n    cellElem4.add(optionElem1, null);\r\n    let optionElem2 = document.createElement(\"option\");\r\n    optionElem2.text = \"orange\";\r\n    cellElem4.add(optionElem2, null);\r\n    let optionElem3 = document.createElement(\"option\");\r\n    optionElem3.text = \"yellow\";\r\n    cellElem4.add(optionElem3, null);\r\n    let optionElem4 = document.createElement(\"option\");\r\n    optionElem4.text = \"green\";\r\n    cellElem4.add(optionElem4, null);\r\n    let optionElem5 = document.createElement(\"option\");\r\n    optionElem5.text = \"blue\";\r\n    cellElem4.add(optionElem5, null);\r\n    let optionElem6 = document.createElement(\"option\");\r\n    optionElem6.text = \"indigo\";\r\n    cellElem4.add(optionElem6, null);\r\n    let optionElem7 = document.createElement(\"option\");\r\n    optionElem7.text = \"violet\";\r\n    cellElem4.add(optionElem7, null);\r\n\r\n    let cellElem5 = document.createElement(\"label\");\r\n    cellElem5.innerText = `type of player ${i}`;\r\n    cellElem5.id = `typeLabel${i}`;\r\n    let cellElem6 = document.createElement(\"select\");\r\n    cellElem6.id = `typeSelection${i}`;\r\n    let optionElem8 = document.createElement(\"option\");\r\n    optionElem8.text = \"Human\";\r\n    cellElem6.add(optionElem8, null);\r\n    let optionElem9 = document.createElement(\"option\");\r\n    optionElem9.text = \"Computer\";\r\n    cellElem6.add(optionElem9, null);\r\n\r\n    boardElem.appendChild(cellElem);\r\n    boardElem.appendChild(cellElem2);\r\n    boardElem.appendChild(cellElem3);\r\n    boardElem.appendChild(cellElem4);\r\n    boardElem.appendChild(cellElem5);\r\n    boardElem.appendChild(cellElem6);\r\n  }\r\n\r\n  let cellElem = document.createElement(\"button\");\r\n  cellElem.innerText = \"submit\";\r\n  cellElem.id = \"submitPlayerInfo\";\r\n  boardElem.appendChild(cellElem);\r\n  return;\r\n}\r\n\r\nfunction checkPlayerInfo() {\r\n  return true; //I will just assume that all player info is valid for now\r\n}\r\n\n\n//# sourceURL=webpack://game/./client/initialScreens.js?");

/***/ }),

/***/ "./client/initializeBoard.js":
/*!***********************************!*\
  !*** ./client/initializeBoard.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst initializeBoard = (state) => {\r\n  state.board = [\r\n    {\r\n      value: \"Christmas Vacation\",\r\n      description: \"collect 6k as you pass\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n        state.players[player].money += 6000;\r\n      },\r\n    },\r\n    {\r\n      value: \"January wk 1\",\r\n      description: \"pay 10% interest on bank notes\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(\r\n          `player ${player} loses 10% interest on bank notes. What a loser!`\r\n        );\r\n        state.players[player].money =\r\n          state.players[player].money - 0.1 * state.players[player].debt;\r\n      },\r\n    },\r\n    {\r\n      value: \"January wk 2\",\r\n      description: \"Draw OTB\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`player ${player} gets an OTB! BOOOOOOOOM!!!`);\r\n        const otb = state.cardsOTB.pop();\r\n        state.players[player].otbs.push(otb);\r\n      },\r\n    },\r\n    {\r\n      value: \"January wk 3\",\r\n      description: \"Pay 500 if you own cows\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(\r\n          `If player ${player} owns cows, they are going to lose 500!`\r\n        );\r\n        if (\r\n          state.players[player].localCows > 0 ||\r\n          state.players[player].rentedCows > 0\r\n        ) {\r\n          state.players[player].money -= 500;\r\n        }\r\n      },\r\n    },\r\n    {\r\n      value: \"January wk 4\",\r\n      description: \"Double hay harvest this year\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(\r\n          `I am going to double the hay harvest of player ${player} this year!`\r\n        );\r\n        //HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP I DON'T Know how I am going to handle hay harvest doubling\r\n      },\r\n    },\r\n    {\r\n      value: \"February wk 1\",\r\n      description: \"collect 1000\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`you get a 1000 but not everybody gets a 1000.`);\r\n        state.players[player].money += 1000;\r\n      },\r\n    },\r\n    {\r\n      value: \"February wk 2\",\r\n      description: \"Draw Farmers Fate\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(\r\n          `player ${player} gets a farmers fate. Welcome to the lottery of life!`\r\n        );\r\n        const ff = state.cardsFF.pop();\r\n        ff[0].act(player);\r\n      },\r\n    },\r\n    {\r\n      value: \"February wk 3\",\r\n      description: \"Go directly to spring planting\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(\r\n          `player ${player} you are allowed to go to spring planting. May the odds serve you well`\r\n        );\r\n        //THIS IS REALLY TOUGH BECAUSE I AM ALREADY INSIDE THE MOVEPLAYER FUNCTION... SO WHAT DO I DO? I PROBABLY SHOULD RE-WRITE THE MOVE FUNCTION IN THIS FUNCTION SO THAT IT ACTS ON THE PLAYER. OTHERWISE WE HAVE TOO MANY FUNCTIONS CALLING OTHER FUNCTIONS\r\n      },\r\n    },\r\n    {\r\n      value: \"February wk 4\",\r\n      description: \"Draw OTB\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`player ${player} gets an OTB! BOOOOOOOOM!!!`);\r\n        const otb = state.cardsOTB.pop();\r\n        state.players[player].otbs.push(otb);\r\n      },\r\n    },\r\n    {\r\n      value: \"March wk 1\",\r\n      description: \"Pay 2000 to replant wheat\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(\r\n          `I lit your wheat fields on fire, now player ${player} must pay 2000 to replant`\r\n        );\r\n        state.players[player].money -= 2000;\r\n      },\r\n    },\r\n    {\r\n      value: \"March wk 2\",\r\n      description: \"pay 500\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(\r\n          `I am going to take 500 from player ${player} just because I don't like their attitude`\r\n        );\r\n        state.players[player].money -= 500;\r\n      },\r\n    },\r\n    {\r\n      value: \"March wk 3\",\r\n      description: \"Go back to second week of January\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(\r\n          `player ${player}, you are not a real farmer yet. Go back to the second week of January`\r\n        );\r\n        //THIS IS REALLY TOUGH BECAUSE I AM ALREADY INSIDE THE MOVEPLAYER FUNCTION... SO WHAT DO I DO? I PROBABLY SHOULD RE-WRITE THE MOVE FUNCTION IN THIS FUNCTION SO THAT IT ACTS ON THE PLAYER. OTHERWISE WE HAVE TOO MANY FUNCTIONS CALLING OTHER FUNCTIONS\r\n      },\r\n    },\r\n    {\r\n      value: \"March wk 4\",\r\n      description: \"pay 2000 if you own fruit\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(\r\n          `I destroyed player ${player}'s fruit because you should eat meat. pay 2000 to replant`\r\n        );\r\n        if (state.players[player].fruit > 0) {\r\n          state.player[player].money -= 2000;\r\n        }\r\n      },\r\n    },\r\n    {\r\n      value: \"April wk 1\",\r\n      description: \"Draw OTB\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`player ${player} gets an OTB! BOOOOOOOOM!!!`);\r\n        const otb = state.cardsOTB.pop();\r\n        state.players[player].otbs.push(otb);\r\n      },\r\n    },\r\n    {\r\n      value: \"Spring Planting\",\r\n      description: \"Double corn for the year\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(\r\n          `I am going to double the corn harvest of player ${player} this year!`\r\n        );\r\n        //HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP HELP I DON'T Know how I am going to handle hay harvest doubling\r\n      },\r\n    },\r\n    {\r\n      value: \"April wk 2\",\r\n      description: \"pay 500\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to take 500 from player ${player}`);\r\n        state.players[player].money -= 500;\r\n      },\r\n    },\r\n    {\r\n      value: \"April wk 3\",\r\n      description: \"pay 1000\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`player ${player}, you lose 1000`);\r\n        state.players[player].money -= 1000;\r\n      },\r\n    },\r\n    {\r\n      value: \"May wk 1\",\r\n      description: \"collect 500\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 500`);\r\n        state.players[player].money += 500;\r\n      },\r\n    },\r\n    {\r\n      value: \"May wk 2\",\r\n      description: \"pay 500\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to take 500 from player ${player}`);\r\n        state.players[player].money -= 500;\r\n      },\r\n    },\r\n    {\r\n      value: \"May wk 3\",\r\n      description: \"Harvest hay, collect 1000\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 1000`);\r\n        state.players[player].money += 1000;\r\n      },\r\n    },\r\n    {\r\n      value: \"May wk 4\",\r\n      description: \"Harvest hay, draw OTB\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`player ${player} gets an OTB! BOOOOOOOOM!!!`);\r\n        const otb = state.cardsOTB.pop();\r\n        state.players[player].otbs.push(otb);\r\n      },\r\n    },\r\n    {\r\n      value: \"June wk 1\",\r\n      description: \"Harvest hay, cut your hay check in half\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"June wk 2\",\r\n      description: \"Harvest hay, collect 500\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"June wk 3\",\r\n      description: \"Harvest cherry, cut your check in half\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"June wk 4\",\r\n      description: \"Harvest cherry, draw farmers fate\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"Independence Day Bash\",\r\n      description: \"Harvest Cherry\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`Nothing unusual going on here`);\r\n      },\r\n    },\r\n    {\r\n      value: \"July wk 1\",\r\n      description: \"Harvest Hay, double your harvest\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"July wk 2\",\r\n      description: \"Harvest Hay, draw OTB\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`player ${player} gets an OTB! BOOOOOOOOM!!!`);\r\n        const otb = state.cardsOTB.pop();\r\n        state.players[player].otbs.push(otb);\r\n      },\r\n    },\r\n    {\r\n      value: \"July wk 3\",\r\n      description: \"Harvest Hay, go to harvest moon\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"July wk 4\",\r\n      description: \"Harvest Wheat, add 50 per acre to harvest check\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"August wk 1\",\r\n      description:\r\n        \"Harvest wheat, go to 4th week of February and collect your 5k\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"August wk 2\",\r\n      description: \"Harvest Wheat, collect 1000 if you have a harvester\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"August wk 3\",\r\n      description: \"Harvest Wheat, collect 500\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"August wk 4\",\r\n      description: \"Harvest wheat, lose 50 per acre\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"September wk 1\",\r\n      description:\r\n        \"Harvest Hay, if you own a tractor go to third week of november\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"September wk 2\",\r\n      description: \"Harvest hay, draw OTB\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`player ${player} gets an OTB! BOOOOOOOOM!!!`);\r\n        const otb = state.cardsOTB.pop();\r\n        state.players[player].otbs.push(otb);\r\n      },\r\n    },\r\n    {\r\n      value: \"Harvest Moon\",\r\n      description: \"Harvest cows, collect 500\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"September wk 3\",\r\n      description: \"Harvest Cows, cut check in half\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"September wk 4\",\r\n      description: \"Harvest cows, pay 2000 if you own fruit\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"October wk 1\",\r\n      description: \"Harvest cows, collect 500\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"October wk 2\",\r\n      description: \"Harvest Hay, draw farmer's fate\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"October wk 3\",\r\n      description: \"Harvest Hay, draw OTB\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`player ${player} gets an OTB! BOOOOOOOOM!!!`);\r\n        const otb = state.cardsOTB.pop();\r\n        state.players[player].otbs.push(otb);\r\n      },\r\n    },\r\n    {\r\n      value: \"October wk 4\",\r\n      description: \"Harvest Apples, draw farmers fate\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"November wk 1\",\r\n      description: \"Harvest Apples, draw OTB\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`player ${player} gets an OTB! BOOOOOOOOM!!!`);\r\n        const otb = state.cardsOTB.pop();\r\n        state.players[player].otbs.push(otb);\r\n      },\r\n    },\r\n    {\r\n      value: \"November wk 2\",\r\n      description: \"Harvest Apples, collect 500\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"November wk 3\",\r\n      description: \"Harvest Apples, collect 1000\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"November wk 4\",\r\n      description: \"Harvest Corn, pay 1000 if you own fruit\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"December wk 1\",\r\n      description: \"Harvest Corn, collect 500\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n    {\r\n      value: \"December wk 2\",\r\n      description: \"Harvest Corn, draw farmer's fate\",\r\n      playersHere: [],\r\n      act: function (player) {\r\n        console.log(`I am going to give player ${player} 6000`);\r\n      },\r\n    },\r\n  ];\r\n  return;\r\n};\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (initializeBoard);\r\n\n\n//# sourceURL=webpack://game/./client/initializeBoard.js?");

/***/ }),

/***/ "./client/initializePlayers.js":
/*!*************************************!*\
  !*** ./client/initializePlayers.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setInitialPlayerInfo: () => (/* binding */ setInitialPlayerInfo)\n/* harmony export */ });\nfunction setInitialPlayerInfo(state) {\r\n  state.players = [];\r\n  let i = 1;\r\n  while (document.getElementById(`nameInput${i}`)) {\r\n    let nameElem = document.getElementById(`nameInput${i}`).value;\r\n    let colorElem = document.getElementById(`colorSelection${i}`).value;\r\n    let typeElem = document.getElementById(`typeSelection${i}`).value;\r\n    let myTurn = true;\r\n    if (i - 1 > 0) {\r\n      myTurn = false;\r\n    }\r\n    state.players[i - 1] = {\r\n      name: nameElem,\r\n      color: colorElem,\r\n      type: typeElem,\r\n      isMyTurn: myTurn,\r\n      playerLocation: 0,\r\n      hay: 10,\r\n      wheat: 10,\r\n      fruit: 10,\r\n      localCows: 10,\r\n      rentedCows: 10,\r\n      money: 20000,\r\n      debt: 20000,\r\n      otbs: [],\r\n    };\r\n    i++;\r\n  }\r\n  return;\r\n}\r\n\n\n//# sourceURL=webpack://game/./client/initializePlayers.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./client/app.js");
/******/ 	
/******/ })()
;